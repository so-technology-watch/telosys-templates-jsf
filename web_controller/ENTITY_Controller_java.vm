##
#parse("../include/packages_variables.vm")
##
#set( $recordClass = "${entity.name}Record" )
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
##
## --- Primary Key arguments, e.g. "customerCode, bookId"
#set( $pkElementsVariables = $fn.argumentsList($entity.keyAttributes) )
##
## --- Primary Key Path Variables, e.g. "String customerCode, Integer bookId"
#set( $pkPathVariables = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPathVariables = "${pkPathVariables}, " )
#end
#set( $pkPathVariables = "${pkPathVariables}$attribute.type $attribute.name" )
#end
##
## --- Referenced entities (e.g. "Book", "Country", "Author", ... )
#set( $referencedEntities = $entity.referencedEntityTypes() )## All referenced entities (PK and not PK)
## -----------------------------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};

#if ( $referencedEntities.size() > 0 )
import java.util.LinkedList;
#end
import java.io.Serializable;
import java.util.List;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

import org.demo.commons.FacesUtils;

// --- Entities
import ${recordPackage}.${recordClass};
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple imports for the same entity
import ${recordPackage}.${ref}Record;
#end
#end

// --- Persistence services 
import ${ROOT_PKG}.persistence.${entity.name}Persistence;
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple imports for the same service
import ${ROOT_PKG}.persistence.${ref}Persistence;
#end
#end
import org.demo.persistence.commons.PersistenceServiceProvider;
#if ( $referencedEntities.size() > 0 )
// --- List Items 
#end
#foreach( $ref in $referencedEntities )
import ${recordListItemPackage}.${ref}ListItem;
#end

/**
 * JSF controller for '${entity.name}' management.
 */
@ManagedBean(name = "${entity.name}Controller")
@ViewScoped
public class ${entity.name}Controller implements Serializable {

	private static final long serialVersionUID = 1L;
	// --- for table of ${entity.name}
	private List<${recordClass}> list${entity.name};
	// --- Main entity edit
	private ${recordClass} ${uncapitalizedEntityName}Current;
	// --- Edit or create mode
	private boolean isUpdate;
	// --- Main entity service
    private ${entity.name}Persistence ${uncapitalizedEntityName}Service = PersistenceServiceProvider.getService(${entity.name}Persistence.class);
	// --- Other service(s)
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple declarations for the same service
	// --- Service to use combo-box "items"
    private ${ref}Persistence ${fn.uncapitalize(${ref})}Service = PersistenceServiceProvider.getService(${ref}Persistence.class);
#end
#end

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public ${entity.name}Controller() {
		this.list${entity.name} = this.${uncapitalizedEntityName}Service.findAll();
		Map<String, String> params = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
## sheck if params is not null
#set( $paramNotNull = "" )
#foreach( $key in $entity.keyAttributes )
		String ${key.name}Param = params.get("${key.name}");
#if( $foreach.count > 1 )
#set( $paramNotNull = "${paramNotNull} && " )
#end
#set( $paramNotNull = "${paramNotNull}${key.name}Param != null" )
#end
		if ($paramNotNull) {
			// update mode
#foreach( $key in $entity.keyAttributes )
#if( ${key.type} == 'Integer' )
			Integer ${key.name} = Integer.parseInt(${key.name}Param);
#elseif( ${key.type} == 'Short' )
			Short ${key.name} = Short.parseShort(${key.name}Param);
#else
			${key.type} ${key.name} = ${key.name}Param;
#end
#end
			this.${uncapitalizedEntityName}Current = this.${uncapitalizedEntityName}Service.findById(${pkElementsVariables});
			if(this.${uncapitalizedEntityName}Current != null) {
				this.setUpdate(true);
			} else {
				// creation mode
				createNew${entity.name}();
			}
		} else {
			// creation mode
			createNew${entity.name}();
		}
	}

	/**
	 * If new "${entity.name}" is select 
	 * Method use in constructor and view page
	 */
	public void createNew${entity.name}() {
		this.${uncapitalizedEntityName}Current = new ${recordClass}();
		this.setUpdate(false);
	}

	/**
	 * Method to save entity "${entity.name}"
	 */
	public void save${entity.name}() {
		try {
			if (isUpdate) {
				this.${uncapitalizedEntityName}Service.update(${uncapitalizedEntityName}Current);
				FacesUtils.addMessage(FacesMessage.SEVERITY_INFO, null, "updateOK", "");

			} else {
				this.${uncapitalizedEntityName}Service.create(${uncapitalizedEntityName}Current);
				this.isUpdate = true;
				FacesUtils.addMessage(FacesMessage.SEVERITY_INFO, null, "createOK", "");

			}
		} catch (Exception e) {
			FacesUtils.addMessage(FacesMessage.SEVERITY_ERROR, null, "saveKO", e.getMessage());
		}
	}

	/**
	 * Delete entity "${entity.name}" by ${pkElementsVariables}
	 *
	 * @param ${pkElementsVariables}
	 * @return link to redirect after delete
	 */
	public String delete${entity.name}ById(${pkPathVariables}) {
		try {
			this.${uncapitalizedEntityName}Service.deleteById(${pkElementsVariables});
			return "${uncapitalizedEntityName}-list";
		} catch (Exception e) {
			FacesUtils.addMessage(FacesMessage.SEVERITY_ERROR, null, "deleteKO", e.getMessage());
			return "";
		}
	}
#foreach( $ref in $referencedEntities )

	/**
	 * Populates the combo-box "items" for the referenced entity "$ref"
	 *
	 * @param model
	 */
	public List<${ref}ListItem> getListOf${ref}Items() {
		List<${ref}Record> list = ${fn.uncapitalize(${ref})}Service.findAll();
		List<${ref}ListItem> items = new LinkedList<${ref}ListItem>();
		for ( ${ref}Record $fn.uncapitalize(${ref}) : list ) {
			items.add(new ${ref}ListItem( $fn.uncapitalize(${ref}) ) );
		}
		return items ;
	}
#end

	// Getter & Setter

	public List<${recordClass}> getList${entity.name}() {
		return list${entity.name};
	}

	public ${recordClass} get${entity.name}Current() {
		return ${uncapitalizedEntityName}Current;
	}

	public void set${entity.name}Current(${recordClass} ${uncapitalizedEntityName}Current) {
		this.${uncapitalizedEntityName}Current = ${uncapitalizedEntityName}Current;
	}

	public boolean getIsUpdate() {
		return isUpdate;
	}

	public void setUpdate(boolean isUpdate) {
		this.isUpdate = isUpdate;
	}
}