##
#parse("../include/packages_variables.vm")
##
#set( $recordClass = "${entity.name}Record" )
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
## --- Primary Key arguments by getters, e.g. "review.getCustomerCode(), review.getBookId()"
#set( $pkElementsGetters = $fn.argumentsListWithGetter($uncapitalizedEntityName, $entity.keyAttributes) )
## --- Primary Key arguments, e.g. "customerCode, bookId"
#set( $pkElementsVariables = $fn.argumentsList($entity.keyAttributes) )
## --- Primary Key request path, e.g. "{customerCode}/{bookId}"
#set( $pkPath = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPath = "${pkPath}/" )
#end
#set( $pkPath = "${pkPath}{${attribute.name}}" )
#end
## --- Primary Key Path Variables, e.g. "@PathVariable("customerCode") String customerCode, @PathVariable("bookId") Integer bookId"
#set( $pkPathVariables = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPathVariables = "${pkPathVariables}, " )
#end
#set( $pkPathVariables = "${pkPathVariables}@PathVariable(${QUOT}${attribute.name}${QUOT}) $attribute.type $attribute.name" )
#end
##
## --- Referenced entities (e.g. "Book", "Country", "Author", ... )
## #set( $referencedEntities = $tools.referencedEntityTypes($entity, $entity.attributes) )## All referenced entities (PK and NON PK)
## #set( $referencedNonPKEntities = $tools.referencedEntityTypes($entity, $entity.nonKeyAttributes) )## Entities referenced by NON PK fields
#set( $referencedEntities = $entity.referencedEntityTypes() )## All referenced entities (PK and NON PK)
## #set( $referencedNonPKEntities = $entity.referencedEntityTypes($entity.nonKeyAttributes) )## Entities referenced by NON PK fields
## -----------------------------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};

#if ( $referencedEntities.size() > 0 )
import java.util.LinkedList;
#end
import java.io.Serializable;
import java.util.List;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.context.FacesContext;

import org.apache.commons.lang3.StringUtils;
import org.demo.commons.FacesUtils;

//--- Entities
import ${recordPackage}.${entity.name}Record;
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple imports for the same entity
import ${recordPackage}.${ref}Record;
#end
#end

//--- Persistence services 
import ${ROOT_PKG}.persistence.${entity.name}Persistence;
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple imports for the same service
import ${ROOT_PKG}.persistence.${ref}Persistence;
#end
#end

#if ( $referencedEntities.size() > 0 )
//--- List Items 
#end
#foreach( $ref in $referencedEntities )
import ${recordListItemPackage}.${ref}ListItem;
#end


/**
 * JSF controller for '${entity.name}' management.
 */
@ManagedBean(name = "${entity.name}Controller")
public class ${entity.name}Controller implements Serializable {

	private static final long serialVersionUID = 1L;
	//--- for table of ${entity.name}
	private List<${entity.name}Record> list${entity.name};
	//--- Mode edition
	private ${entity.name}Record ${uncapitalizedEntityName}Courant;
	//--- Mode edition
	private boolean isUpdate;
	//--- Main entity service
    private ${entity.name}Persistence ${uncapitalizedEntityName}Service;
	//--- Other service(s)
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple declarations for the same service

    private ${ref}Persistence ${fn.uncapitalize(${ref})}Service;
	//--- atribut to use combo-box "items"
	private static List<${ref}ListItem> list${ref}ListItem;
#end
#end
	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public ${entity.name}Controller() {
#foreach( $ref in $referencedEntities )

		if (list${ref}ListItem == null) {
			list${ref}ListItem = getListOf${ref}Items();
		}
#end
		
		Map<String, String> params = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
		this.list${entity.name} = this.${uncapitalizedEntityName}Service.findAll();
		String id${entity.name}Param = params.get("id${entity.name}Param");
		if (StringUtils.isNotBlank(id${entity.name}Param)) {
			// update mode
			this.${uncapitalizedEntityName}Courant = this.${uncapitalizedEntityName}Service.findById(Integer.parseInt(id${entity.name}Param));
			this.setUpdate(true);
		} else {
			// creation mode
			creatNew${entity.name}();
		}
	}

	/**
	 * if new "${entity.name}" is select 
	 * method use in constructor and view page
	 */
	public void creatNew${entity.name}() {
		this.${uncapitalizedEntityName}Courant = new ${entity.name}Record();
		this.setUpdate(false);
	}

#foreach( $ref in $referencedEntities )

	/**
	 * Populates the combo-box "items" for the referenced entity "$ref"
	 * @param model
	 */
	private List<${ref}ListItem> getListOf${ref}Items() {
		List<${ref}Record> list = ${fn.uncapitalize(${ref})}Service.findAll();
		List<${ref}ListItem> items = new LinkedList<${ref}ListItem>();
		for ( ${ref}Record $fn.uncapitalize(${ref}) : list ) {
			items.add(new ${ref}ListItem( $fn.uncapitalize(${ref}) ) );
		}
		return items ;
	}
#end

	/**
	 * method to save entity "${entity.name}"
	 */
	public void save${entity.name}() {
		try {
			if (isUpdate) {
				this.${uncapitalizedEntityName}Service.update(${uncapitalizedEntityName}Courant);
				FacesUtils.addMessage(FacesMessage.SEVERITY_INFO, null, "updateOK", "");

			} else {
				this.${uncapitalizedEntityName}Service.create(${uncapitalizedEntityName}Courant);
				this.isUpdate = true;
				FacesUtils.addMessage(FacesMessage.SEVERITY_INFO, null, "createOK", "");

			}
		} catch (Exception e) {
			FacesUtils.addMessage(FacesMessage.SEVERITY_ERROR, null, e.getMessage(), "");
		}
	}

	/**
	 * delete entity "${entity.name}" by ${pkElementsVariables}
	 * @param ${pkElementsVariables}
	 * @return link to redirect after delete
	 */
	public String delete${entity.name}ById(Integer ${pkElementsVariables}) {
		if (${pkElementsVariables} != null) {
			this.${uncapitalizedEntityName}Service.deleteById(${pkElementsVariables});
			return "${uncapitalizedEntityName}-list";
		}
		return "";
	}

	// Getter & Setter

	public List<${entity.name}Record> getList${entity.name}() {
		return list${entity.name};
	}

	public ${entity.name}Record get${entity.name}Courant() {
		return ${uncapitalizedEntityName}Courant;
	}

	public void set${entity.name}Courant(${entity.name}Record ${uncapitalizedEntityName}Courant) {
		this.${uncapitalizedEntityName}Courant = ${uncapitalizedEntityName}Courant;
	}

	public boolean getIsUpdate() {
		return isUpdate;
	}

	public void setUpdate(boolean isUpdate) {
		this.isUpdate = isUpdate;
	}
#foreach( $ref in $referencedEntities )

	public static List<${ref}ListItem> getList${ref}ListItem() {
		return list${ref}ListItem;
	}
#end
}